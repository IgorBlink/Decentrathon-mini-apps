import React, { useState, useRef, useEffect } from 'react';
import './ResumeScroll.css'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
import Footer from '../Footer/Footer';
import { useTelegram } from '../../TelegramContext'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ö—É–∫
import LoadingScreen from '../LoadingScreen/LoadingScreen'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏

const ResumeScroll = () => {
  const { tg } = useTelegram(); // –ü–æ–ª—É—á–∞–µ–º Telegram API
  const [vacancies, setVacancies] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
  const [currentIndex, setCurrentIndex] = useState(0);
  const [touchStart, setTouchStart] = useState(0);
  const [isSwiping, setIsSwiping] = useState(false);
  const [swipeOffset, setSwipeOffset] = useState(0);
  const [cardClass, setCardClass] = useState('');
  const [resetTimeout, setResetTimeout] = useState(null);
  const [hintVisible, setHintVisible] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const [loading, setLoading] = useState(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const telegramID = tg?.initDataUnsafe?.user?.id || 803817300;
  const cardRef = useRef(null);
  const containerRef = useRef(null);
  const hintTimeoutRef = useRef(null); // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–π–º–µ—Ä –ø–æ–¥—Å–∫–∞–∑–∫–∏

  useEffect(() => {
    const fetchVacancies = async (telegramID) => {
      try {
        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/vacancy/get-vacancy`, {
          method: 'POST', // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ POST
          headers: new Headers({
            'Content-Type': 'application/json',
          }),
          body: JSON.stringify({ telegramID }), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram ID –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        });

        const data = await response.json();

        if (data.success) {
          setVacancies(data.data.matchingVacancies); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π:', data);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:', error);
      } finally {
        setLoading(false); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ false –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
      }
    };

    fetchVacancies(telegramID); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ
  }, [telegramID]); // –£–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  const centerCard = () => {
    setSwipeOffset(0);
    setIsSwiping(false);
    setCardClass('');
  };

  useEffect(() => {
    setResetTimeout(setTimeout(centerCard, 3000)); // 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
    return () => clearTimeout(resetTimeout);
  }, [swipeOffset]);

  useEffect(() => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    hintTimeoutRef.current = setTimeout(() => {
      setHintVisible(true);
    }, 5000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è

    return () => clearTimeout(hintTimeoutRef.current);
  }, []);

  const handleSwipe = (direction) => {
    if (direction === 'left') {
      console.log('–î–∏–∑–ª–∞–π–∫ –≤–∞–∫–∞–Ω—Å–∏–∏:', vacancies[currentIndex]);
      setCardClass('dislike');
    } else if (direction === 'right') {
      console.log('–õ–∞–π–∫ –≤–∞–∫–∞–Ω—Å–∏–∏:', vacancies[currentIndex]);
      setCardClass('like');
    }

    setTimeout(() => {
      setCurrentIndex((prevIndex) => (prevIndex + 1) % vacancies.length);
      centerCard();
    }, 300);
  };

  const handleTouchStart = (e) => {
    setTouchStart(e.touches ? e.touches[0].clientX : e.clientX); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞—Å–∞–Ω–∏–µ –∏–ª–∏ –º—ã—à—å
    setIsSwiping(true);
    clearTimeout(resetTimeout);
    clearTimeout(hintTimeoutRef.current); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
    setHintVisible(false); // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
  };

  const handleTouchMove = (e) => {
    const touchEnd = e.touches ? e.touches[0].clientX : e.clientX; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞—Å–∞–Ω–∏–µ –∏–ª–∏ –º—ã—à—å
    const distance = touchEnd - touchStart;

    const containerWidth = containerRef.current.offsetWidth;
    const cardWidth = cardRef.current.offsetWidth;
    const maxSwipe = (containerWidth - cardWidth) / 2;

    setSwipeOffset(Math.max(-maxSwipe, Math.min(distance, maxSwipe)));
  };

  const handleTouchEnd = () => {
    const threshold = 5;

    if (Math.abs(swipeOffset) > threshold) {
      const direction = swipeOffset < 0 ? 'left' : 'right';
      handleSwipe(direction);
    } else {
      centerCard();
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ü–ö
  const handleMouseDown = (e) => {
    handleTouchStart(e); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–≤–∞–π–ø–∞
  };

  const handleMouseMove = (e) => {
    if (isSwiping) {
      handleTouchMove(e); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è —Å–≤–∞–π–ø–∞
    }
  };

  const handleMouseUp = () => {
    handleTouchEnd(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–≤–∞–π–ø–∞
  };

  const getCardStyle = () => {
    return {
      transform: `translateX(${swipeOffset}px) rotateZ(${(swipeOffset / 15).toFixed(1)}deg)`,
      opacity: 1,
    };
  };

  if (loading) {
    return <LoadingScreen />; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
  }

  return (
    <div className="resume-page">
      <div
        className="resume-container"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
        onMouseDown={handleMouseDown} // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ü–ö
        onMouseMove={handleMouseMove} // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ü–ö
        onMouseUp={handleMouseUp} // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ü–ö
        ref={containerRef}
      >
        {vacancies.length > 0 && (
          <div
            ref={cardRef}
            className={`resume-card ${cardClass}`}
            style={getCardStyle()}
          >
            <img
  src={`data:image/png;base64,${vacancies[currentIndex]?.photo}`} // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ –æ—à–∏–±–æ–∫
  alt="Avatar"
  className="avatar"
/>

            <h2>{vacancies[currentIndex]?.grades.join(', ')}</h2> {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Ä–æ–≤–Ω–∏ */}
            <p>{vacancies[currentIndex]?.skills.join(', ')}</p> {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏ */}
            <div className="skills-container">
              {vacancies[currentIndex]?.skills.map((skill, index) => (
                <span key={index} className="skill">{skill}</span>
              ))}
            </div>
          </div>
        )}
        {isSwiping && (
          <div className={`swipe-indicator ${swipeOffset < 0 ? 'left' : 'right'}`}>
            {swipeOffset < 0 ? 'üëé' : 'üëç'}
          </div>
        )}
        {hintVisible && ( 
          <div className="hint-overlay">
            <div className="hint-content">
              <div className="arrow left">‚Üê</div>
              <div className="hint-text">Swipe left for Skip</div>
              <div className="arrow right">‚Üí</div>
              <div className="hint-text">Swipe right for Blink</div>
            </div>
          </div>
        )}
      </div>

      {/* –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É—Ç–µ—Ä–∞ */}
      <Footer /> {/* –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä */}
    </div>
  );
};

export default ResumeScroll;
